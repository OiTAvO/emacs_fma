#+TITLE: My emacs init file for linux
#+OPTIONS: toc:nil

* default-directory
#+BEGIN_SRC emacs-lisp
;;; home directory
(setq default-directory "~/")
#+END_SRC


* magit
#+BEGIN_SRC emacs-lisp
  ;;; magit package
  (use-package magit
    :ensure t)
#+END_SRC


* magithub 
#+BEGIN_SRC emacs-lisp
  ;;; magithub package
  (use-package magithub
    :after magit
    :ensure t
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/github"))
#+END_SRC


* yasnippet
#+BEGIN_SRC emacs-lisp
  ;;; yasnippet
  (use-package yasnippet	
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC


* iedit
#+BEGIN_SRC emacs-lisp
  ;;; iedit-mode
  (use-package iedit
    :ensure t
    :bind ("C-c ;" . iedit-mode))
#+END_SRC


* semantic
#+BEGIN_SRC emacs-lisp
  ;;; semantic-mode
  (semantic-mode 1)
  (global-semantic-idle-scheduler-mode 1)
#+END_SRC


* doc view ghostscript
#+BEGIN_SRC emacs-lisp
  ;;; ghostscript .exe
  (setq doc-view-ghostscript-program "ghostscript")
#+END_SRC


* ox-reval (presentation)
#+BEGIN_SRC emacs-lisp 
  ;;; revealjs for presentations
  (use-package ox-reveal
    :ensure t
    :init
    (setq org-reveal-root "file:///home/otavio/reveal.js"))

  ;;; htmlize as dependency
  (use-package htmlize
    :ensure t)
#+END_SRC


* powerline
#+BEGIN_SRC emacs-lisp
  ;;; powerline-mode
  (use-package powerline
    :ensure t
    :config (powerline-center-theme))
#+END_SRC


* Languages
** C and C++ MODE
*** auto-complete
#+BEGIN_SRC emacs-lisp
  ;;; auto-complete
  (use-package auto-complete
    :ensure t
    :config
    (require 'auto-complete-config)
    (ac-config-default))
#+END_SRC

*** semantic-auto-complete
#+BEGIN_SRC emacs-lisp
  ;;; function do semanctic auto-complete
  (defun my:semantic-autocomplete()
    (add-to-list 'ac-sources 'ac-source-semantic))
#+END_SRC

*** cpplint
#+BEGIN_SRC emacs-lisp
  ;;; function to use flymake-google-cpplint
  (use-package flymake-google-cpplint
    :ensure t)

  (use-package flymake-cursor
    :ensure t)

  (defun my:flymake-google-init()
    (custom-set-variables
     '(flymake-google-cpplint-command "/home/otavio/.local/bin/cpplint"))
    (flymake-google-cpplint-load))
#+END_SRC

*** google C style
#+BEGIN_SRC emacs-lisp
  ;;; google-c-style
  (use-package google-c-style
    :ensure t)
#+END_SRC

*** C and C++ headers
#+BEGIN_SRC emacs-lisp
  ;;; function to use auto-complete for header files
  (use-package auto-complete-c-headers
    :ensure t)

  (defun my:ac-c-header-init()
    (add-to-list 'ac-sources 'ac-source-c-headers)
    (add-to-list 'ac-sources 'ac-source-yasnippet)
    (add-to-list 'achead:include-directories '"/usr/include/")
    (add-to-list 'achead:include-directories '"/usr/include/c++/8"))
#+END_SRC

*** srefactor
#+BEGIN_SRC emacs-lisp
  ;;; srefactor
  (use-package srefactor
    :ensure t
    :bind (("M-RET" . srefactor-refactor-at-point)
	   :map c-mode-map
	   :map c++-mode-map))
#+END_SRC

*** hooks
#+BEGIN_SRC emacs-lisp
  ;;; headers hook
  (add-hook 'c-mode-hook 'my:ac-c-header-init)
  (add-hook 'c++-mode-hook 'my:ac-c-header-init)


  ;;; flymake hook
  (add-hook 'c++-mode-hook 'flymake-cursor-mode)
  (add-hook 'c-mode-hook 'my:flymake-google-init)
  (add-hook 'c++-mode-hook 'my:flymake-google-init)

  ;;; ede hook
  ;;;(add-hook 'c++-mode-hook 'ede-minor-mode)

  ;;; google c style hook
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  ;;; semancti auto-complete
  (add-hook 'c-mode-common-hook 'my:semantic-autocomplete)
#+END_SRC


** D MODE
*** d-mode
#+BEGIN_SRC emacs-lisp
  ;;; d-mode
  (use-package d-mode
    :ensure t)
#+END_SRC

*** company-dcd 
#+BEGIN_SRC emacs-lisp
  ;;; company-dcd
  (use-package company-dcd
    :ensure t)
#+END_SRC

*** dfmt  
#+BEGIN_SRC emacs-lisp
  ;;; dfmt
  (use-package dfmt
    :ensure t)
#+END_SRC

*** hooks
#+BEGIN_SRC emacs-lisp
  ;;; dfmt hook
  (add-hook 'd-mode-hook 'dfmt-setup-keys)

  ;;; company-dcd hook
  (add-hook 'd-mode-hook 'company-dcd-mode)

  ;;; hook for tab-width
  (add-hook 'd-mode-hook
	    (lambda ()
	      (setq c-basic-offset 4)
	      (setq tab-width 4)))

  ;;; org-babel highlight syntax for D
  (add-to-list 'org-src-lang-modes '("D" . d))
#+END_SRC


** UML-MODE 
*** plantuml
#+BEGIN_SRC emacs-lisp
  ;;; plantuml
  (use-package plantuml-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
#+END_SRC



** HASKELL-MODE
*** haskell-mode
#+BEGIN_SRC emacs-lisp
  ;;; haskell-mode
  (use-package haskell-mode
    :ensure t
    :config
    (require 'haskell-interactive-mode)
    (require 'haskell-process))
#+END_SRC

*** hindent
#+BEGIN_SRC emacs-lisp
  ;;; hindent
  (use-package hindent
    :ensure t)
#+END_SRC

*** company-ghci
#+BEGIN_SRC emacs-lisp
  ;;; company-ghci
  (use-package company-ghci
    :ensure t
    :config
    (push 'company-ghci company-backends)
    (defun my-company-ghci()
      (auto-complete-mode -1)
      ))
#+END_SRC

*** hook
#+BEGIN_SRC emacs-lisp
  ;;; hindent-hook
  (add-hook 'haskell-mode-hook 'hindent-mode)

  ;;; interactive-haskell-hook
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  ;;; company-ghci-hook
  (add-hook 'haskell-mode-hook 'company-mode)
  (add-hook 'haskell-mode-hook 'my-company-ghci)
  (add-hook 'haskell-interactive-mode-hook 'company-mode)
#+END_SRC


** PYTHON
*** elpy-mode
 #+begin_src emacs-lisp
   ;;; elpy mode
   (use-package elpy
     :ensure t
     :init (elpy-enable)
     :config
     (setq elpy-rpc-python-command "python3"))
 #+end_src

*** autopep8
#+begin_src emacs-lisp
  (use-package py-autopep8
    :ensure t)
#+end_src

*** python-hook
#+begin_src emacs-lisp
  ;;; my-function to disable auto-complete
  (add-hook 'elpy-mode-hook '(lambda ()
			       "Disable auto-complete"
			       (auto-complete-mode -1)))


  ;;; my-function to disable flymake
  (add-hook 'elpy-mode-hook '(lambda ()
			       "Disable flymake"
			       (flymake-mode -1)))

  ;;; add-hook flycheck
  (add-hook 'elpy-mode-hook 'flycheck-mode)

  ;;; add-hook py-autopep8
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+end_src

